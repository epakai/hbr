One area I consider to be an issue is error checking is very spread out
between the XML and argument generation code. This is in part because XML
isn't capable of doing in depth validation, but it is very easy to have it
verify types or possibilities from subsets. The main issue lies in the fact
that the split between XML and in code validation is not precise so it is
not apparent where it is incomplete or could be improved.

The first goal should be to define the split precisely and ensure input
validation is handled completely with good errors.

Document all functions with doxygen style comments

I think the code breaks down into three main areas with the functions I
currently associate with each section.

    
3) Generating Handbrake options and calling handbrake
    
    a) int main()

        Lots of error checking and input validation needs to be moved 
        to relevant functions.
        Seems like the code yanking the filename from the hb_command 
        is backwards. Perhaps the filename should get stored prior to this.
        Move the thumbnail generation to a simple function call.
        Overall goals: shorten main a lot, try to keep it to straight 
        function calls and very little control flow.
        
    g) int call_handbrake();

        Seems alright. Logic is a bit deep. Maybe do individual access
        checking and errors instead of nesting so it's more obvious where
        an error occurs.

    h) int hb_fork();
        
        Same problem with deep logic. Not sure why I'm checking writable
        for the current directory in this function and for the log filename
        in call_handbrake(). Seems redundant. So simplify branches and make
        their errors closer to the condition checking.
